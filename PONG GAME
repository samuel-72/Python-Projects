# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    
    # LEFT Direction
    if direction == 1:
        rHor = random.randrange(120, 240)
        rVer = random.randrange(60, 180)
        #ball_vel = [-(4.0 + rHor) , ( (3.5/6.0) + rVer)  ]
        ball_vel = [-rHor/30.0 , rVer/30.0 ]
    
    # RIGHT Direction
    else:
        rHor = random.randrange(120, 240)
        rVer = random.randrange(60, 180)
        #ball_vel = [(4.0 + rHor) , ( (5.0/6.0) + rVer)  ]
        ball_vel = [ rHor/30.0, rVer/30.0 ]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(random.randrange(1,3))
    paddle1_pos = 0 
    paddle2_pos = 0
    paddle1_vel = 0
    paddle2_vel = 0
    score1 = 0
    score2 = 0
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel, WIDTH, HEIGHT
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_text(str(score1), (200, 100), 32, 'White')
    canvas.draw_text(str(score2), (400, 100), 32, 'White')
    canvas.draw_text("PONG GAME", (210, 20), 32, 'Blue')
        
    # Update ball position
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # collide and reflect off of left hand side of canvas
    
    # The below line are commented as we are checking for these conditions
    # when we check if the BALL has collided with PADDLES
    
    #if ball_pos[0] <= BALL_RADIUS + PAD_WIDTH:
    #    ball_vel[0] = - ball_vel[0]

    #if ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH:
    #    ball_vel[0] = - ball_vel[0]
        
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
    if ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
            
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, 'Red' , 'White')
    
    # update paddle's vertical position, keep paddle on the screen
    
    if ( paddle1_pos >= 0 and paddle1_pos + paddle1_vel >= 0 and paddle1_pos + PAD_HEIGHT <= HEIGHT and paddle1_pos + paddle1_vel + PAD_HEIGHT <= HEIGHT):
         paddle1_pos += paddle1_vel
    
    if ( paddle2_pos >= 0 and paddle2_pos + paddle2_vel >= 0 and paddle2_pos + PAD_HEIGHT <= HEIGHT and paddle2_pos + paddle2_vel + PAD_HEIGHT <= HEIGHT):
         paddle2_pos += paddle2_vel
            
    # draw paddles
    
    canvas.draw_line( (0, paddle1_pos), (0, paddle1_pos+PAD_HEIGHT), 2*PAD_WIDTH, 'White')
    canvas.draw_line( (WIDTH, paddle2_pos), (WIDTH, paddle2_pos+PAD_HEIGHT), 2*PAD_WIDTH, 'White')
    
    # determine whether paddle and ball collide    
    
    #Ball collides with left paddle - Paddle 1
    if ( ball_pos[0] <= BALL_RADIUS + PAD_WIDTH and paddle1_pos <= ball_pos[1] and paddle1_pos + PAD_HEIGHT >= ball_pos[1]  ):
        ball_vel[0] = - ( ball_vel[0] + ball_vel[0]/10.0 )
        ball_pos[0] += ball_vel[0]
        #print ( ball_vel[0], ball_vel[1] )
        
    #Ball collides with left gutter and not paddle
    elif ( ball_pos[0] <= BALL_RADIUS + PAD_WIDTH ):
        score2 += 1
        spawn_ball(2)
        
    #Ball collides with right paddle - Paddle 2
    if ( ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH and paddle2_pos <= ball_pos[1] and paddle2_pos + PAD_HEIGHT >= ball_pos[1]  ):
        ball_vel[0] = - ( ball_vel[0] + ball_vel[0]/10.0 )
        ball_pos[0] += ball_vel[0]
        #print ( ball_vel[0], ball_vel[1] )

    #Ball collides with right gutter and not paddle
    elif ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH:
        score1 += 1
        spawn_ball(1)
        

    # draw scores
        canvas.draw_text(str(score1), (200, 100), 32, 'White')
        canvas.draw_text(str(score2), (400, 100), 32, 'White')
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 2
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel -= acc
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel += acc
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel += acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel -= acc
   

   
def keyup(key):
    global paddle1_vel, paddle2_vel
    paddle1_vel = 0
    paddle2_vel = 0

def restart_handler():
    new_game()
    
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
restart = frame.add_button('RESTART', restart_handler)


# start frame
new_game()
frame.start()
